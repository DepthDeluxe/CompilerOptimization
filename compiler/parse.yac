%{
#include <stdio.h>
#include <stdlib.h>

#include "support.h"
#include "types.h"
#include "compiler.h"
%}

%token ID NUM INT FLOAT FNUM VOID IF ELSE WHILE BREAK CONTINUE RET LE LT GT GE EQ NE

%%
/* This yacc file parses C- tokens and produces a tree.
 * The tree is closer to a parse tree than a syntax tree
 * for ease of use in the semantic checking and code
 * generation phases.

 * tree node attributes are:
 *    Kind              kind;    // which tree node kind it is
 *    int              numval;   // value if its a number
 *    char *           strval;   // name if its an id
 *    struct pnode *   ptr1;     // pointers to child tree nodes
 *    struct pnode *   ptr2;
 *    struct pnode *   ptr3;
 *    int              line;     // line number the code was on
*/

/* 1. prog -> declList */
prog : declList
{
  parseTreePtr = newParseTreeNode();  /* Make a new tree node for it. */
  parseTreePtr->kind = progNormal;         /* Set its kind from the enum types. */
  parseTreePtr->ptr1 = $1;            /* Point to the component nodes. */
}
;

/* 2. declList -> decl declList | decl */
declList : decl declList
{
  $$ = newParseTreeNode();
  $$->kind = declListNormal;
  $$->ptr1 = $1;
  $$->ptr2 = $2;
}
| decl
{
  $$ = newParseTreeNode();
  $$->kind = declListSingle;
  $$->ptr1 = $1;
}
;

/* 3. decl -> varDecl | funDecl */
decl : varDecl
{
  $$ = newParseTreeNode();
  $$->kind = declVar;
  $$->ptr1 = $1;
}
| funDecl
{
  $$ = newParseTreeNode();
  $$->kind = declFun;
  $$->ptr1 = $1;
}
;

/* 4. varDecl -> typeSpec ID ';' | typeSpec ID '[' NUM ']' ';' */
varDecl : typeSpec ID ';'
{
  $$ = $2;
  $$->kind = varDeclSingle;
  $$->ptr1 = $1;
}
| typeSpec ID '[' NUM ']' ';'
{
  $$ = $2;
  $$->kind = varDeclArray;
  $$->ptr1 = $1;
  $$->array_len = $4->value.integer;
  free($4);
}
;

/* 5. typeSpec -> INT | FLOAT | VOID */
typeSpec : INT
{
  $$ = newParseTreeNode();
  $$->kind = typeSpecInt;
}
| FLOAT
{
  $$ = newParseTreeNode();
  $$->kind = typeSpecFloat;
}
| VOID
{
  $$ = newParseTreeNode();
  $$->kind = typeSpecVoid;
}
;

/* 6. funDecl -> typeSpec ID '(' params ')' funStmt  */
funDecl : typeSpec ID '(' params ')' funStmt
{
  $$ = $2;
  $$->kind = funDecl1;
  $$->ptr1 = $1;
  $$->ptr2 = $4;
  $$->ptr3 = $6;
}
;

/* 7. params -> paramList | VOID */
params : paramList
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = paramsNormal;          /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| VOID
{
   $$ = newParseTreeNode();    /* Set the node. */
   $$->kind = paramsVoid;         /* Set the kind. */
}
;

/* 8. paramList -> param ',' paramList | param */
paramList : param ',' paramList
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = paramListNormal;       /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
  $$->ptr2 = $3;
}
| param
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = paramListSingle;       /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

/* 9. param -> typeSpec ID | typeSpec ID '[' ']' */
param : typeSpec ID
{
  $$ = $2;                     /* Set the node. */
  $$->kind = paramSingle;           /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| typeSpec ID '[' ']'
{
  $$ = $2;                     /* Set the node. */
  $$->kind = paramArray;           /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

/* 10. funStmt -> '{' localDecl stmtList '}' */
funStmt : '{' localDecl stmtList '}'
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = funStmt1;        /* Set the kind. */
  $$->ptr1 = $2;               /* Set the pointers. */
  $$->ptr2 = $3;
}
;

/* 11. localDecl -> varDecl localDecl | nothing */
localDecl : varDecl localDecl
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = localDeclNormal;       /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
  $$->ptr2 = $2;
}
|
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = localDeclVoid;/* Set the kind. */
}
;

/* 12. stmtList -> stmt stmtList | nothing */
stmtList : stmt stmtList
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtListNormal;        /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
  $$->ptr2 = $2;
}
|
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtListVoid;        /* Set the kind. */
}
;

/* 13. stmt -> expStmt | compStmt | selStmt | whileStmt | jumpStmt | retStmt  */
stmt : expStmt
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtExp;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| compStmt
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtComp;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| selStmt
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtSel;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| whileStmt
{
  $$ = newParseTreeNode();
  $$->kind = stmtWhile;
  $$->ptr1 = $1;
}
| jumpStmt
{
  $$ = newParseTreeNode();
  $$->kind = stmtJump;
  $$->ptr1 = $1;
}
| retStmt
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtRet;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

/* 13a. e_stmt -> expStmt | compStmt | e_selStmt | retStmt */
e_stmt : expStmt
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtExp;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| compStmt
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtComp;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| e_selStmt
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtSel;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| retStmt
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = stmtRet;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

/* 14. expStmt -> exp ';' | ';' */
expStmt : exp ';'
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = expStmtNormal;         /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| ';'
{
  $$ = newParseTreeNode(); /* Set the node. */
  $$->kind = expStmtVoid; /* Set the kind. */
  /* Set the pointers. */
}
;

/* 15. compStmt -> '{' localDecl stmtList '}' */
compStmt : '{' localDecl stmtList '}'
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = compStmt1;        /* Set the kind. */
  $$->ptr1 = $2;               /* Set the pointers. */
  $$->ptr2 = $3;
}
;

/* 16. selStmt -> if '(' exp ')' stmt | if '(' exp ')' e_stmt else stmt */
selStmt : IF '(' exp ')' stmt
{
  $$ = newParseTreeNode(); /* Set the node. */
  $$->kind = selStmtIf; /* Set the kind. */
  $$->ptr1 = $3; /* Set the pointers. */
  $$->ptr2 = $5;
}
| IF '(' exp ')' e_stmt ELSE stmt
{
  $$ = newParseTreeNode(); /* Set the node. */
  $$->kind = selStmtIfElse; /* Set the kind. */
  $$->ptr1 = $3;   /* Set the pointers. */
  $$->ptr2 = $5;
  $$->ptr3 = $7;
}
;

/* 16a. e_selStmt -> if '(' exp ')' e_stmt else stmt */
e_selStmt : IF '(' exp ')' e_stmt ELSE e_stmt
{
  $$ = newParseTreeNode(); /* Set the node. */
  $$->kind = selStmtIfElse; /* Set the kind. */
  $$->ptr1 = $3;   /* Set the pointers. */
  $$->ptr2 = $5;
  $$->ptr3 = $7;
}
;

/* 17: whileStmt -> while '(' exp ')' stmt */
whileStmt : WHILE '(' exp ')' stmt
{
  $$ = newParseTreeNode(); /* set the node */
  $$->kind = whileStmtNormal;
  $$->ptr1 = $3;
  $$->ptr2 = $5;
}
;

/* 17a: jumpStmt -> break | continue */
jumpStmt : BREAK
{
  $$ = newParseTreeNode();
  $$->kind = jumpStmtBreak;
}
| CONTINUE
{
  $$ = newParseTreeNode();
  $$->kind = jumpStmtContinue;
}

/* 18. retStmt -> return ';' | return exp ';' */
retStmt : RET ';'
{
  $$ = newParseTreeNode(); /* Set the node. */
  $$->kind = retStmtVoid; /* Set the kind. */
}
| RET exp ';'
{
  $$ = newParseTreeNode(); /* Set the node. */
  $$->kind = retStmtExp; /* Set the kind. */
  $$->ptr1 = $2;  /* Set the pointers. */
}
;

/* 19. exp -> var '=' exp | simpExp */
exp : var '=' exp
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = expAssign;             /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
  $$->ptr2 = $3;
}
| simpExp
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = expSimple;             /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

/* 20. var -> ID | ID '[' exp ']' */
var : ID
{
  $$ = $1;                     /* Set the node. */
  $$->kind = varSingle;             /* Set the kind. */
}
| ID '[' exp ']'
{
  $$ = $1;                     /* Set the node. */
  $$->kind = varArray;             /* Set the kind. */
  $$->ptr1 = $3;               /* Set the pointers. */
}
;

/* 21. simpExp -> addExp relop addExp | addExp */
simpExp : addExp relop addExp
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = simpExpRelop;         /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
  $$->ptr2 = $2;
  $$->ptr3 = $3;
}
| addExp
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = simpExpAdditive;         /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

/* 22. relop -> '<' '=' | '<' | '>' | '>' '=' | '=' '=' | '!' '=' */
relop : LE
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = relopLE; }      /* Set the kind. */
| LT
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = relopLT; }
| GT
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = relopGT; }
| GE
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = relopGE; }
| EQ
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = relopEQ; }
| NE
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = relopNE; }
;

/* 23. addExp -> addExp addop term | term */
addExp : addExp addop term
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = addExpNormal;          /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
  $$->ptr2 = $2;
  $$->ptr3 = $3;
}
| term
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = addExpTerm;          /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

/* 24. addop -> '+' | '-' */
addop : '+'
{
  $$ = newParseTreeNode();    /* Set the node. */
  $$->kind = addop;           /* Set the kind. */
}
| '-'
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = subop;
}
;

/* 25. term -> term mulop factor | factor */
term : term mulop factor
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = termNormal;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
  $$->ptr2 = $2;
  $$->ptr3 = $3;
}
| factor
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = termFactor;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

/* 26. mulop -> '*' | '/' */
mulop : '*'
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = mulopMult;           /* Set the kind. */
}
| '/'
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = mulopDiv;
}
;

/* 27. factor -> '(' exp ')' | var | call | NUM | FNUM */
factor : '(' exp ')'
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = factorExp;          /* Set the kind. */
  $$->ptr1 = $2;               /* Set the pointers. */
}
| var
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = factorVar;          /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| call
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = factorCall;          /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
| NUM
{
  $$ = $1;                     /* Set the node. */
  $$->kind = factorNum;          /* Set the kind. */
}
| FNUM
{
  $$ = $1;
  $$->kind = factorFloat;
}
;

/* 28. call -> ID '(' args ')' */
call : ID '(' args ')'
{
  $$ = $1;                     /* Set the node. */
  $$->kind = call1;            /* Set the kind. */
  $$->ptr1 = $3;               /* Set the pointers. */
}
;

/* 29. args -> argList | nothing */
args : argList
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = argsNormal;            /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
|
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = argsVoid;            /* Set the kind. */
}
;

/* 30. argList -> exp ',' argList | exp */
argList : exp ',' argList
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = argListNormal;         /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
  $$->ptr2 = $3;
}
| exp
{
  $$ = newParseTreeNode();     /* Set the node. */
  $$->kind = argListSingle;         /* Set the kind. */
  $$->ptr1 = $1;               /* Set the pointers. */
}
;

%%

#include "lex.yy.c"

yyerror(char *s) {
  fprintf(stderr,"Syntactic error!  Line %d, unexpected token ",lineno);
  switch (yychar) {
  case ';':
    fprintf(stderr,"\";\".\n");
    break;
  case '[':
    fprintf(stderr,"\"[\".\n");
    break;
  case ']':
    fprintf(stderr,"\"]\".\n");
    break;
  case '(':
    fprintf(stderr,"\"(\".\n");
    break;
  case ')':
    fprintf(stderr,"\")\".\n");
    break;
  case ',':
    fprintf(stderr,"\",\".\n");
    break;
  case '{':
    fprintf(stderr,"\"{\".\n");
    break;
  case '}':
    fprintf(stderr,"\"{\".\n");
    break;
  case '=':
    fprintf(stderr,"\"=\".\n");
    break;
  case LE:
    fprintf(stderr,"\"<=\".\n");
    break;
  case LT:
    fprintf(stderr,"\"<\".\n");
    break;
  case GT:
    fprintf(stderr,"\">\".\n");
    break;
  case GE:
    fprintf(stderr,"\">=\".\n");
    break;
  case EQ:
    fprintf(stderr,"\"==\".\n");
    break;
  case NE:
    fprintf(stderr,"\"!=\".\n");
    break;
  case '+':
    fprintf(stderr,"\"+\".\n");
    break;
  case '-':
    fprintf(stderr,"\"-\".\n");
    break;
  case '*':
    fprintf(stderr,"\"*\".\n");
    break;
  case '/':
    fprintf(stderr,"\"/\".\n");
    break;
  case INT:
    fprintf(stderr,"\"int\".\n");
    break;
  case FLOAT:
    fprintf(stderr,"\"float\".\n");
    break;
  case VOID:
    fprintf(stderr,"\"void\".\n");
    break;
  case IF:
    fprintf(stderr,"\"if\".\n");
    break;
  case ELSE:
    fprintf(stderr,"\"else\".\n");
    break;
  case WHILE:
    fprintf(stderr,"\"while\".\n");
    break;
  case RET:
    fprintf(stderr,"\"return\".\n");
    break;
  case ID:
    fprintf(stderr,"\"%s\".\n",yylval->value.string);
    break;
  case NUM:
    fprintf(stderr,"\"%d\".\n",yylval->value.integer);
    break;
  case FNUM:
    fprintf(stderr,"\"%f\".\n",yylval->value.floating);
    break;
  }
  exit(1);
}

