/* array that will hold memoization */
int memoizedUarray[30];

/* initialized memoizedUarray */
void initUarray(int index) {
  if (index >= 30) { return; }

  /* set the proper values depending on the index */
  if (index == 0) {
    memoizedUarray[index] = 0;
  }
  if (index == 1) {
    memoizedUarray[index] = 1;
  }
  if (index > 1) {
    memoizedUarray[index] = -1;
  }

  initUarray(index + 1);
}

/* recursively computes the fibonacci numbers using memoization */
int recursiveUfib(int num) {
  if (memoizedUarray[num] > -1) {
    return memoizedUarray[num];
  }

  memoizedUarray[num] = recursiveUfib( num - 1 ) + recursiveUfib( num - 2 );

  return memoizedUarray[num];
}

/* main program, recuses itself */
void main(void) {
  int i;

  initUarray(0);

  /* get input from user and break main if it is out of bounds */
  i = input();
  if ( i < 0 ) {
    return;
  }
  else if ( i > 29 ) {
    return;
  }

  output( recursiveUfib(i) );

  main();
}
