1. When the left side of the expression is a plain float or int, it is unnecessary to push
   the right value onto the stack since it is immediately popped off.

    ---------------------------       -------------------------       -----------------------------
   | calc right value into ac0 | --> | get left address to ac1 | --> | store value into mem @ addr |
    ---------------------------       -------------------------       -----------------------------
    ** only works when the left hand argument is a plain float/int.

2.

**** a=0 ****
18:  LDC 0,0(0)
19:  LDA 1,0(4)
20:  ST  0,0(1)

3.
// this is the C answer to the question
/* 19. exp -> var '=' exp */
static void generateCode(TreeNode* nodePtr) {
  if( nodePtr->ptr1->kinde == varSingle ) {
    expression( nodePtr->ptr2 );
    var( nodePtr->ptr1, 0 );
    emitRM( "ST", ac0, 0, ac1, "  assignment: variable = dMem[ac1] = value" );
  } else {
    expression( nodePtr->ptr2 );
    push( ac0, "  assignment: retrieve value" );
    var( nodePtr->ptr1, 0 );
    pop( ac0, "  assignment: retrieve value" );
    emitRM( "ST", ac0, 0, ac1, "  assignment: variable = dMem[ac1] = value" );
  }
}
